parse_date_time(timestamp)
capmetro_time <- capmetro_UT %>%
ymd_hms(
...,
quiet = FALSE,
tz = "UTC",
locale = Sys.getlocale("LC_TIME"),
truncated = 0
)
capmetro_time <- capmetro_UT %>%
ymd_hms(
timestamp,
quiet = FALSE,
tz = "UTC",
locale = Sys.getlocale("LC_TIME"),
truncated = 0
)
capmetro_time <- capmetro_UT %>%
ymd_hms(
timestamp
)
capmetro_time <- capmetro_UT %>%
as_string(timestamp)
capmetro_UT <- capmetro_UT %>%
mutate(timestamp = as_string(timestamp))
capmetro_UT <- capmetro_UT %>%
mutate(timestamp = as.string(timestamp))
capmetro_UT <- capmetro_UT %>%
mutate(timestamp = as.numeric(timestamp))
capmetro_UT <- read.csv(here("Data/capmetro_UT.csv"))
capmetro_UT <- mutate(capmetro_UT,
day_of_week = factor(day_of_week,
levels=c("Mon", "Tue", "Wed","Thu", "Fri", "Sat", "Sun")),
month = factor(month,
levels=c("Sep", "Oct","Nov")))
capmetro_UT <- mutate(capmetro_UT,
day_of_week = factor(day_of_week,
levels=c("Mon", "Tue", "Wed","Thu", "Fri", "Sat", "Sun")),
month = factor(month,
levels=c("Sep", "Oct","Nov")),
date = ymd_hms($timestamp))
capmetro_UT <- mutate(capmetro_UT,
day_of_week = factor(day_of_week,
levels=c("Mon", "Tue", "Wed","Thu", "Fri", "Sat", "Sun")),
month = factor(month,
levels=c("Sep", "Oct","Nov")),
date = ymd_hms(timestamp))
capmetro_scatter <- capmetro_UT %>%
group_by(hour(date), hour_of_day)
View(capmetro_UT)
View(capmetro_rev)
View(capmetro_scatter)
capmetro_scatter <- capmetro_UT %>%
group_by(hour_of_day)
View(capmetro_rev)
View(capmetro_scatter)
ggplot(capmetro_scatter) +
geom_point(aes(x=temperature, y=boarding, color=weekend)) +
facet_wrap(~hour_of_day)
ggplot(capmetro_UT) +
geom_point(aes(x=temperature, y=boarding, color=weekend)) +
facet_wrap(~hour_of_day)
data(SaratogaHouses)
library(tidyverse)
library(ggplot2)
library(modelr)
library(rsample)
library(mosaic)
data(SaratogaHouses)
glimpse(SaratogaHouses)
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
lm2 = lm(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse(lm2, saratoga_test)
lm_medium = lm(price ~ . - pctCollege - sewer - waterfront - landValue - newConstruction, data=saratoga_train)
rmse(lm_medium, saratoga_test)
View(SaratogaHouses)
lm_better = lm(price ~ . - pctCollege - sewer - newConstruction, data=saratoga_train)
rmse(lm_better, saratoga_test)
# baseline medium model with 11 main effects
lm_medium = lm(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=saratoga_train)
rmse(lm_medium, saratoga_test)
glimpse(SaratogaHouses)
# feature matrices
Xtrain = model.matrix(~ . - 1, data=saratoga_train)
Xtest = model.matrix(~ . - 1, data=saratoga_test)
# feature matrices
xtrain = model.matrix(~ . - 1, data=saratoga_train)
xtest = model.matrix(~ . - 1, data=saratoga_test)
ytrain = saratoga_train$price
ytrain = saratoga_test$price
# rescale
scale_train = apply(xtrain, 2, sd)
xtilde_train = scale(xtrain, scale = scale_train)
xtilde_test = scale(xtest, scale = scale_train)
head(xtrain, 2)
head(xtilde_train)
err = rmse(knnreg(price ~ ., data=xtilde_train, k=i),xtilde_test)
library(foreach)
library(caret)
knn_saratoga = foreach(i = 2:100, .combine='rbind') %do% {
err = rmse(knnreg(price ~ ., data=xtilde_train, k=i),xtilde_test)
}%>% as.data.frame()
err = rmse(knnreg(price ~ lotSize, data=xtilde_train, k=i),xtilde_test)
knn_saratoga = foreach(i = 2:100, .combine='rbind') %do% {
err = rmse(knnreg(price ~ lotSize, data=xtilde_train, k=i),xtilde_test)
}%>% as.data.frame()
err = rmse(knnreg(price ~ lotSize, data=saratoga_train, k=i),saratoga_test)
knn_saratoga = foreach(i = 2:100, .combine='rbind') %do% {
err = rmse(knnreg(price ~ lotSize, data=saratoga_train, k=i),saratoga_test)
}%>% as.data.frame()
View(knn_saratoga)
View(xtrain)
View(xtilde_test)
xtilde_train = scale(xtrain, scale = scale_train) %>%
as.data.frame()
View(xtilde_train)
xtilde_test = scale(xtest, scale = scale_train) %>%
as.data.frame()
err = rmse(knnreg(price ~ lotSize, data=xtilde_train, k=i),xtilde_test)
knn_saratoga = foreach(i = 2:100, .combine='rbind') %do% {
err = rmse(knnreg(price ~ ., data=xtilde_train, k=i),xtilde_test)
}%>% as.data.frame()
knn_saratoga = foreach(i = 2:100, .combine='rbind') %do% {
err = rmse(knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, data=xtilde_train, k=i),xtilde_test)
}%>% as.data.frame()
err = rmse(knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + fuel + centralAir, data=xtilde_train, k=i),xtilde_test)
err = rmse(knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + centralAir, data=xtilde_train, k=i),xtilde_test)
err = rmse(knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms, data=xtilde_train, k=i),xtilde_test)
View(knn_saratoga)
?knnreg
knn_saratoga = foreach(i = 2:100, .combine='rbind') %do% {
err = rmse(knnreg(price ~ lotSize + age + +landValue + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + 'heatinghot air' + 'heatinghot water/steam' + heatingelectric + fuelelectric + fueloil, data=xtilde_train, k=i),xtilde_test)
}%>% as.data.frame()
err = rmse(knnreg(price ~ lotSize + age + +landValue + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatingelectric + fuelelectric + fueloil, data=xtilde_train, k=i),xtilde_test)
err = rmse(knnreg(price ~ lotSize + age + +landValue + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + "heatinghot air" + "heatinghot water/steam" + heatingelectric + fuelelectric + fueloil, data=xtilde_train, k=i),xtilde_test)
err = rmse(knnreg(price ~ lotSize + age + +landValue + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatingelectric + fuelelectric + fueloil, data=xtilde_train, k=i),xtilde_test)
xtilde_train = scale(xtrain, scale = scale_train) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air")
xtilde_train = scale(xtrain, scale = scale_train) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air", heatinghot_water/steam = "heatinghot water/steam")
xtilde_train = scale(xtrain, scale = scale_train) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air") %>%
rename(heatinghot_water/steam = "heatinghot water/steam")
xtilde_train = scale(xtrain, scale = scale_train) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air") %>%
rename(heatinghot_water_steam = "heatinghot water/steam")
xtilde_test = scale(xtest, scale = scale_train) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air") %>%
rename(heatinghot_water_steam = "heatinghot water/steam")
err = rmse(knnreg(price ~ lotSize + age + +landValue + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatingelectric + heatinghot_air + heatinghot_water_steam + fuelelectric + fueloil, data=xtilde_train, k=i),xtilde_test)
View(knn_saratoga)
err = rmse(knnreg(price ~ lotSize + age + +landValue + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatingelectric + heatinghot_air, data=xtilde_train, k=i),xtilde_test)
# Cross validating with the K-Folds approach
xtilde_folds = crossv_kfold(SaratogaHouses, k=K_folds)
K_folds = 5
k_grid = c(2:30,35,40,45,50,55,60,65,70,80, 90,100)
# Cross validating with the K-Folds approach
xtilde_folds = crossv_kfold(SaratogaHouses, k=K_folds)
View(xtilde_folds)
?crossv_kfold
test = xtilde_folds$test$'1'
View(test)
test = xtilde_folds$test$'1' %>%  as.data.frame()
View(test)
?apply
test1 = saratoga_folds$test$'1' %>%
as.data.frame() %>%
scale(center = FALSE, scale = TRUE)
# Cross validating with the K-Folds approach
saratoga_folds = crossv_kfold(SaratogaHouses, k=K_folds)
test1 = saratoga_folds$test$'1' %>%
as.data.frame() %>%
scale(center = FALSE, scale = TRUE)
test1 = saratoga_folds$test$'1' %>%
as.matrix()
View(test1)
test1 = saratoga_folds$test$'1' %>%
model.matrix(~ . - 1)
test1 = saratoga_folds$test$'1' %>%
as.data.frame()
xtest = model.matrix(~ . - 1, data=test1)
test1 = saratoga_folds$test$'1' %>%
as.data.frame() %>%
model.matrix(~ . - 1, data=test1)
test1 = saratoga_folds$test$'1' %>%
as.data.frame() %>%
model.matrix(~ . - 1)
test1 = saratoga_folds$test$'1' %>%
as.data.frame()
xtest = model.matrix(~ . - 1, data=test1)
train1 = saratoga_folds$train$'1' %>%
as.data.frame()
scale_train1 = apply(xtrain1, 2, sd)
xtrain1 = model.matrix(~ . - 1, data=train1)
scale_train1 = apply(xtrain1, 2, sd)
xtilde_train = scale(xtrain1, scale = scale_train1) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air") %>%
rename(heatinghot_water_steam = "heatinghot water/steam")
xtilde_train1 = scale(xtrain1, scale = scale_train1) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air") %>%
rename(heatinghot_water_steam = "heatinghot water/steam")
View(xtilde_train1)
# Cross validating with the K-Folds approach
saratoga_folds = crossv_kfold(SaratogaHouses, k=K_folds)
# Plotting our RMSE averages versus K
ggplot(cv_grid_350) +
geom_point(aes(x=k, y=err))+
scale_x_log10()+
geom_errorbar(aes(x=k, ymin = err-std_err, ymax = err+std_err)) +
labs(title = "350 Trim: RMSE for Different K Values\n", x = "K", y = "RMSE") +
theme_classic()
saratoga_folds = crossv_kfold(SaratogaHouses, k=K_folds)
cv_grid = foreach(k = k_grid, .combine='rbind') %dopar% {
models = map(saratoga_folds$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, k=k, data = ., use.all=FALSE))
errs = map2_dbl(models, saratoga_folds$test, modelr::rmse)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
# Plotting our RMSE averages versus K
ggplot(cv_grid) +
geom_point(aes(x=k, y=err))+
scale_x_log10()+
geom_errorbar(aes(x=k, ymin = err-std_err, ymax = err+std_err)) +
labs(title = "350 Trim: RMSE for Different K Values\n", x = "K", y = "RMSE") +
theme_classic()
saratoga_scaled <- scale(SaratogaHouses, center = FALSE, scale = TRUE)
?scale
saratoga_scaled <- scale(SaratogaHouses, center = FALSE)
saratoga_scaled <- scale(SaratogaHouses, center = FALSE, scale = apply(SaratogaHouses, 2, sd))
saratoga_scaled <- scale(SaratogaHouses, center = FALSE, scale = apply(SaratogaHouses, 2, sd), na.rm = TRUE)
saratoga_scaled <- scale(SaratogaHouses, center = FALSE, scale = apply(SaratogaHouses, 2, sd, na.rm = TRUE))
saratoga_scaled <- scale(SaratogaHouses, center = FALSE, scale = apply(SaratogaHouses, 2, sd, na.rm = FALSE))
saratoga_scaled <- scale(SaratogaHouses)
saratoga_matrix = model.matrix(~ . - 1, data=SaratogaHouses)
View(saratoga_matrix)
saratoga_scaled <- scale(SaratogaHouses, center = FALSE, scale = apply(SaratogaHouses, 2, sd))
saratoga_scaled <- scale(saratoga_matrix, center = FALSE, scale = apply(saratoga_matrix, 2, sd))
View(saratoga_scaled)
saratoga_folds2 = crossv_kfold(saratoga_scaled, k=K_folds)
saratoga_scaled <- scale(saratoga_matrix, center = FALSE, scale = apply(saratoga_matrix, 2, sd)) %>%
as.data.frame()
saratoga_folds2 = crossv_kfold(saratoga_scaled, k=K_folds)
errs = map2_dbl(models, saratoga_folds2$test, modelr::rmse)
cv_grid2 = foreach(k = k_grid, .combine='rbind') %dopar% {
models = map(saratoga_folds2$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heating + fuel + centralAir, k=k, data = ., use.all=FALSE))
errs = map2_dbl(models, saratoga_folds2$test, modelr::rmse)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
saratoga_scaled <- scale(saratoga_matrix, center = FALSE, scale = apply(saratoga_matrix, 2, sd)) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air") %>%
rename(heatinghot_water_steam = "heatinghot water/steam")
models = map(saratoga_folds2$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatinghot_air + heatinghot_water_steam + fuel + centralAir, k=k, data = ., use.all=FALSE))
cv_grid2 = foreach(k = k_grid, .combine='rbind') %dopar% {
models = map(saratoga_folds2$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatinghot_air + heatinghot_water_steam + fuel + centralAir, k=k, data = ., use.all=FALSE))
errs = map2_dbl(models, saratoga_folds2$test, modelr::rmse)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
saratoga_scaled <- scale(saratoga_matrix, center = FALSE, scale = apply(saratoga_matrix, 2, sd)) %>%
as.data.frame() %>%
rename(heatinghot_air = "heatinghot air") %>%
rename(heatinghot_water_steam = "heatinghot water/steam")
saratoga_folds2 = crossv_kfold(saratoga_scaled, k=K_folds)
cv_grid2 = foreach(k = k_grid, .combine='rbind') %dopar% {
models = map(saratoga_folds2$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatinghot_air + heatinghot_water_steam + fuel + centralAir, k=k, data = ., use.all=FALSE))
errs = map2_dbl(models, saratoga_folds2$test, modelr::rmse)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
models = map(saratoga_folds2$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatinghot_air + heatinghot_water_steam + centralAir, k=k, data = ., use.all=FALSE))
cv_grid2 = foreach(k = k_grid, .combine='rbind') %dopar% {
models = map(saratoga_folds2$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatinghot_air + heatinghot_water_steam + centralAir, k=k, data = ., use.all=FALSE))
errs = map2_dbl(models, saratoga_folds2$test, modelr::rmse)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
cv_grid2 = foreach(k = k_grid, .combine='rbind') %dopar% {
models = map(saratoga_folds2$train, ~ knnreg(price ~ lotSize + age + livingArea + pctCollege + bedrooms +
fireplaces + bathrooms + rooms + heatinghot_air + heatinghot_water_steam, k=k, data = ., use.all=FALSE))
errs = map2_dbl(models, saratoga_folds2$test, modelr::rmse)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
ggplot(cv_grid2) +
geom_point(aes(x=k, y=err))+
scale_x_log10()+
geom_errorbar(aes(x=k, ymin = err-std_err, ymax = err+std_err)) +
labs(title = "350 Trim: RMSE for Different K Values\n", x = "K", y = "RMSE") +
theme_classic()
gc()
german_credit <- read.csv(here("Data/german_credit.csv"))
View(german_credit)
german_default <- german_credit %>%
group_by(history) %>%
summarize(default_rate = mean(Default))
View(german_credit)
View(german_default)
ggplot(german_default) +
geom_bar(aes(x=history, y=default_rate))
ggplot(german_default) +
geom_col(aes(x=history, y=default_rate))
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
credit_split = initial_split(german_credit, prop = 0.8)
library(rsample)
credit_split = initial_split(german_credit, prop = 0.8)
credit_train = training(credit_split)
credit_test = testing(credit_split)
logit_credit = glm(default ~ ., data=credit_train)
logit_credit = glm("default" ~ ., data=credit_train)
logit_credit = glm($default ~ ., data=credit_train)
View(credit_train)
logit_credit = glm(Default ~ ., data=credit_train)
View(logit_credit)
coef(logit_credit)
coef(logit_credit) %>%  round(3)
phat_test_logit_credit = predict(logit_credit, credit_test)
phat_test_logit_credit = predict(logit_credit, credit_test, type='response')
yhat_test_logit_credit = ifelse(phat_test_logit_credit > .5, 1, 0)
confusion_out_logit = table(y = credit_test$Default,
yhat = yhat_test_logit_credit)
confusion_out_logit
install.packages("ROCR")
library(ROCR)
install.packages("gamlr")
library(gamlr)
semiconductor = read.csv("../data/semiconductor.csv")
semiconductor = read.csv(here(data/semiconductor.csv")
n = nrow(semiconductor)
semiconductor = read.csv(here(data/semiconductor.csv))
semiconductor = read.csv(here(data/semiconductor.csv))
library(gamlr)
german_credit <- read.csv(here("Data/german_credit.csv"))
semiconductor = read.csv(here("data/semiconductor.csv"))
n = nrow(semiconductor)
## full model
full = glm(FAIL ~ ., data=semiconductor, family=binomial)
## A forward stepwise procedure
# null model
null = glm(FAIL~1, data=semiconductor, family=binomial)
# forward stepwise: it takes a long time!
system.time(fwd <- step(null, scope=formula(full), dir="forward"))
length(coef(fwd)) # chooses around 70 coef
# for gamlr, and many other fitting functions,
# you need to create your own numeric feature matrix.
scx = model.matrix(FAIL ~ .-1, data=semiconductor) # do -1 to drop intercept!
scy = semiconductor$FAIL
# fit a single lasso
sclasso = gamlr(scx, scy, family="binomial")
plot(sclasso) # the path plot!
# AIC selected coef
# note: AICc = AIC with small-sample correction.  See ?AICc
AICc(sclasso)  # the AIC values for all values of lambda
plot(sclasso$lambda, AICc(sclasso))
plot(log(sclasso$lambda), AICc(sclasso))
# the coefficients at the AIC-optimizing value
# note the sparsity
scbeta = coef(sclasso)
scbeta
# optimal lambda
log(sclasso$lambda[which.min(AICc(sclasso))])
sum(scbeta!=0) # chooses 30 (+intercept) @ log(lambda) = -4.5
# Now without the AIC approximation:
# cross validated lasso (`verb` just prints progress)
# this takes a little longer, but still so fast compared to stepwise
sccvl = cv.gamlr(scx, scy, nfold=10, family="binomial", verb=TRUE)
# plot the out-of-sample deviance as a function of log lambda
# Q: what are the bars associated with each dot?
plot(sccvl, bty="n")
## CV min deviance selection
scb.min = coef(sccvl, select="min")
log(sccvl$lambda.min)
sum(scb.min!=0) # note: this is random!  because of the CV randomness
## CV 1se selection (the default)
scb.1se = coef(sccvl)
log(sccvl$lambda.1se)
sum(scb.1se!=0) ## usually selects all zeros (just the intercept)
## comparing AICc and the CV error
# note that AIC is a pretty good estimate of out-of-sample deviance
# for values of lambda near the optimum
# outside that range: much worse
plot(sccvl, bty="n", ylim=c(0, 1))
lines(log(sclasso$lambda),AICc(sclasso)/n, col="green", lwd=2)
legend("top", fill=c("blue","green"),
legend=c("CV","AICc"), bty="n")
library(gamlr)
library(tidyverse)
# read in data: all goals in NHL hockey from 2002-2014
goal = read.csv(here("data/hockey/goal.csv", row.names=1))
)
# read in data: all goals in NHL hockey from 2002-2014
goal = read.csv(here("data/hockey/goal.csv"))
# read in data: all goals in NHL hockey from 2002-2014
goal = read.csv(here("data/goal.csv"))
head(goal, 10)
# data on situation, teams, and players on the ice
# these are stored in a sparse matrix format called "Matrix market" (MM)
config = readMM("../data/config.mtx")
# data on situation, teams, and players on the ice
# these are stored in a sparse matrix format called "Matrix market" (MM)
config = readMM(here("data/config.mtx"))
library(tidyverse)
library(ggplot2)
library(modelr)
library(rsample)
library(mosaic)
library(foreach)
library(caret)
data(SaratogaHouses)
# Split into training and testing sets
saratoga_split = initial_split(SaratogaHouses, prop = 0.8)
saratoga_train = training(saratoga_split)
saratoga_test = testing(saratoga_split)
saratoga_folds = crossv_kfold(SaratogaHouses, k=K_folds)
K_folds = 5
k_grid = c(2:30,35,40,45,50,55,60,65,70,80, 90,100)
saratoga_folds = crossv_kfold(SaratogaHouses, k=K_folds)
View(saratoga_split)
View(saratoga_folds)
german_credit <- read.csv(here("Data/german_credit.csv"))
german_default <- german_credit %>%
group_by(history) %>%
summarize(default_rate = mean(Default))
ggplot(german_default) +
geom_col(aes(x=history, y=default_rate))
hotels.dev <- read.csv(here("Data/hotels.dev.csv"))
hotels_dev <- read.csv(here("Data/hotels_dev.csv"))
View(hotels_dev)
View(hotels_dev)
lm_small = lm(children ~ market_segment + adults + customer_type + is_repeated_guest)
lm_small = lm(children ~ market_segment + adults + customer_type + is_repeated_guest,
data = hotels_dev)
View(lm_small)
coef(lm_small)
hotels_split = initial_split(hotels_dev, prop = 0.8)
hotels_train = training(hotels_split)
hotels_test = testing(hotels_split)
lm_small = lm(children ~ market_segment + adults + customer_type + is_repeated_guest,
data = hotels_train)
coef(lm_small)
lm_big = lm(children ~ . - arrival_date,
data = hotels_train)
coef(lm_small)
coef(lm_big)
rmse(lm_small, hotels_test)
rmse(lm_big, hotels_test)
lm0 = lm(price ~ 1, data=hotels_train)
lm0 = lm(childrem ~ 1, data=hotels_train)
lm0 = lm(children ~ 1, data=hotels_train)
lm_forward = step(lm0, direction='forward',
lm0 = lm(children ~ 1, data=hotels_train)
lm_forward = step(lm0, direction='forward', scope=~(. - arrival.date))
lm0 = lm(children ~ 1, data=hotels_train)
colnames(hotels_train)
lm_manual = lm(children ~ hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment distrubtion_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + book_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests + arrival_date,
data = hotels_train)
lm_manual = lm(children ~ hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment distrubtion_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + book_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests + arrival_date,
data = hotels_train)
lm_manual = lm(children ~ stays_in_week_nights + adults + meal + distribution_channel + market_segment distrubtion_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + book_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests + arrival_date,
data = hotels_train)
lm_manual = lm(children ~ hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distrubtion_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + book_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests + arrival_date,
data = hotels_train)
lm_manual = lm(children ~ hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distribution_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + book_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests + arrival_date,
data = hotels_train)
lm_manual = lm(children ~ hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distribution_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + booking_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests + arrival_date,
data = hotels_train)
lm_manual = lm(children ~ hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distribution_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + booking_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests,
data = hotels_train)
rmse(lm_big, hotels_test)
rmse(lm_manual, hotels_test)
lm_forward = step(lm0, direction='forward',
scope=~(hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distribution_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + booking_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests,
))
lm_forward = step(lm0, direction='forward',
scope=~(hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distribution_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + booking_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests))
rmse(lm_small, hotels_test)
rmse(lm_big, hotels_test)
rmse(lm_manual, hotels_test)
rmse(lm_forward, hotels_test)
scope=~((hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distribution_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + booking_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests)^2)
lm_forward = step(lm0, direction='forward',
scope=~(hotel + lead_time + stays_in_weekend_nights + stays_in_week_nights + adults + meal + distribution_channel + market_segment + distribution_channel + is_repeated_guest + previous_cancellations + previous_bookings_not_canceled + reserved_room_type + assigned_room_type + booking_changes + deposit_type + days_in_waiting_list + customer_type + average_daily_rate + required_car_parking_spaces + total_of_special_requests)^2)
lm_step = step(lm_big,
scope=~(.)^2)
AICc(lm_small)
AICc(lm_small, hotels_test)
?AICc
