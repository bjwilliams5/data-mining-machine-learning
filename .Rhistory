scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
if (i<10) {
names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],4)
}
else {
names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],5)
}
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
#  if (i<10) {
names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],4)
#  }
#  else {
#    names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],5)
#  }
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
#  if (i<10) {
names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],4)
#  }
#  else {
#    names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],5)
#  }
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
#  if (i<10) {
colnames(scaled_train[1:19]) <- substring(colnames(scaled_train[1:19]),4)
#  }
#  else {
#    names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],5)
#  }
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
#  if (i<10) {
# colnames(scaled_train[1:19]) <- substring(colnames(scaled_train[1:19]),4)
#  }
#  else {
#    names(scaled_train)[1:19] <- substring(names(scaled_train)[1:19],5)
#  }
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
View(train_1)
View(train_10)
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning and drop the for-loop prefix
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
View(train_6)
## Create a for loop to generate scaled data based on training set
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning and clean up column names
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
names(scaled_test) <- str_replace_all(names(scaled_test), c(" " = "." , "/" = "." ))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds) %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
# drop prefixes and spaces in column names
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
names(scaled_test) <- str_replace_all(names(scaled_test), c(" " = "." , "/" = "." ))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
names(scaled_train) <- str_replace_all(names(scaled_train), c(" " = "." , "/" = "." ))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
View(test_3)
foreach (i = 1:K_folds, , .combine='cbind') %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
# drop prefixes and spaces in column names
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
names(scaled_test) <- str_replace_all(names(scaled_test), c(" " = "." , "/" = "." ))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
names(scaled_train) <- str_replace_all(names(scaled_train), c(" " = "." , "/" = "." ))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds, .combine='cbind') %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
# drop prefixes and spaces in column names
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
names(scaled_test) <- str_replace_all(names(scaled_test), c(" " = "." , "/" = "." ))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
names(scaled_train) <- str_replace_all(names(scaled_train), c(" " = "." , "/" = "." ))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
foreach (i = 1:K_folds, .combine='rbind') %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
# drop prefixes and spaces in column names
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
names(scaled_test) <- str_replace_all(names(scaled_test), c(" " = "." , "/" = "." ))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
names(scaled_train) <- str_replace_all(names(scaled_train), c(" " = "." , "/" = "." ))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
View(saratoga_folds)
saratoga_folds_scaled <- foreach (i = 1:K_folds, .combine='rbind') %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
# drop prefixes and spaces in column names
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
names(scaled_test) <- str_replace_all(names(scaled_test), c(" " = "." , "/" = "." ))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
names(scaled_train) <- str_replace_all(names(scaled_train), c(" " = "." , "/" = "." ))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
}
View(saratoga_folds_scaled)
?map
knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=k, data = test_1, use.all=FALSE))
knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=k, data = test_1, use.all=FALSE)
cv_grid = foreach(k = k_grid, .combine='rbind') %dopar% {
knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=k, data = test_1, use.all=FALSE)
}
knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=25, data = test_1, use.all=FALSE)
rmse(knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=25, data = train_1, use.all=FALSE), test_1)
cv_grid = foreach(k = k_grid, .combine='rbind') %dopar% {
rmse(knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=k, data = train_1, use.all=FALSE), test_1)
} %>% as.data.frame
View(cv_grid)
View(cv_grid)
cv_rows = foreach(k = k_grid, .combine='rbind') %dopar% {
errs <- rmse(knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=k, data = train_1, use.all=FALSE), test_1)
} %>% as.data.frame
cv_rows = foreach(k = k_grid, .combine='rbind') %dopar% {
errs <- rmse(knnreg(price ~ lotSize + age +landValue + livingArea +
bedrooms + fireplaces + bathrooms + rooms +
heatinghot.water.steam + heatingelectric + fuelelectric +
centralAirNo + fueloil, k=k, data = train_1, use.all=FALSE), test_1)
c(k=k, err = mean(errs), std_err = sd(errs)/sqrt(K_folds))
} %>% as.data.frame
View(cv_rows)
View(saratoga_folds)
folds <- list(
foreach (i = 1:K_folds, .combine='rbind') %do% {
# call each training set "train" with an index and then convert it to a matrix
train_name <- paste("train_", i, sep = "")
train = as.data.frame(saratoga_folds$train[i])
train_mtx = model.matrix(~ . - 1, data=train)
# repeat the same process for testing
test_name <- paste("test_", i, sep = "")
test = as.data.frame(saratoga_folds$test[i])
test_mtx = model.matrix(~ . - 1, data=test)
# create our scale using only the training data
scale_train = apply(train_mtx[,2:20], 2, sd)  # calculate std dev for each column
# scale the training and testing data using std dev of the training data
scaled_train = scale(train_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
scaled_test = scale(test_mtx[,2:20], scale = scale_train) %>%
as.data.frame()
# this automatically removes price (because we don't want to scale it)
# so we add it back in
scaled_test = scaled_test %>%
mutate(price = test_mtx[,1])
scaled_train = scaled_train %>%
mutate(price = train_mtx[,1])
# assign the name we created at the beginning
# drop prefixes and spaces in column names
colnames(scaled_test) <- sub(".*\\.", "", colnames(scaled_test))
names(scaled_test) <- str_replace_all(names(scaled_test), c(" " = "." , "/" = "." ))
colnames(scaled_train) <- sub(".*\\.", "", colnames(scaled_train))
names(scaled_train) <- str_replace_all(names(scaled_train), c(" " = "." , "/" = "." ))
assign(train_name, scaled_test)
assign(test_name, scaled_train)
})
View(folds)
?lapply
folds <- list(train_1, train_2)
View(folds)
folds_test <- list(test_1, test_2)
folds <- c(folds_train, folds_test)
folds_train <- list(train_1, train_2)
folds_test <- list(test_1, test_2)
folds <- c(folds_train, folds_test)
View(folds)
View(saratoga_folds)
typeof(saratoga_folds)
folds <- cbind(folds_train, folds_test)
View(folds)
typeof(folds)
folds_train <- list(
foreach(i = 1:K_folds){
train_[i]
}
folds_train <- list(
foreach(i = 1:K_folds) %do%{
train_[i]
}
folds_train <- list(
foreach(i = 1:K_folds) %do%{
train_[i]
})
folds_train <- list(
foreach(i = 1:K_folds) %do%{
cbind(train_[i], test_[i])
})
folds_train <- list(
foreach(i = 1:K_folds) %do%{
cbind(train_[[i]], test_[[i]])
})
fold_1 <- cbind(train_1, test_1)
knnreg(house_price ~ lotSize + age +landValue + livingArea + bedrooms +
fireplaces + bathrooms + rooms + heatinghot.water.steam
+ heatingelectric + fuelelectric + centralAirNo + fueloil, k=20, data = train_1, use.all=FALSE)
knnreg(price ~ lotSize + age +landValue + livingArea + bedrooms +
fireplaces + bathrooms + rooms + heatinghot.water.steam
+ heatingelectric + fuelelectric + centralAirNo + fueloil, k=20, data = train_1, use.all=FALSE)
first <- list(train_1, train_2)
View(first)
second <- list(test_1, test_2)
mapply(c, first, second, SIMPLIFY=FALSE)
combined <- mapply(c, first, second, SIMPLIFY=FALSE)
View(combined)
