label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right", legend.title = element_text("Arrival Delay"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right", legend.title = element_text("Arrival Delay"))
, guide = "legend"
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right", legend.title = element_text("Arrival Delay"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25), name = "Average Delay") +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right", legend.title = element_text("Arrival Delay"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right", legend.title = element_text("Arrival Delay")) +
guides(size=guide_legend(title="New Legend Title"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(size=guide_legend(title="New Legend Title"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(color=guide_legend(title="New Legend Title"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend", name = "Arrival Delay") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(color=guide_legend(title="New Legend Title"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25), guide = "legend") +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(color=guide_legend(title="New Legend Title"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25), guide = "legend") +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right")
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25), , name = "Arrival Delay") +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right")
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25), name = "Arrival Delay") +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right")
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(size=guide_legend(title="Combined Legend Title"), color=guide_legend(title="Combined Legend Title"))
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(size=guide_legend(title="Arrival Delay"), color=guide_legend(title="Arrival Delay"))
ABIA_outbound <- ABIA %>%
filter(Origin == 'AUS')
## Let's join our tables
ABIA_locations <- inner_join(x = ABIA_outbound, y = airports, by = 'Dest')
## We need to reorganize the data and map it to the usmap package:
ABIA_locations <- ABIA_locations %>%
dplyr::select("Latitude", everything()) %>%       # Reorder LAT
dplyr::select("Longitude", everything()) %>%      # Reorder LONG
group_by(Longitude, Latitude, Dest) %>%           #Only 100+ flight destinations
summarize(count = n(),
mean_arr_delay = mean(ArrDelay, na.rm=TRUE)) %>%
filter(count > 499)
ABIA_transformed <- usmap_transform(ABIA_locations)
## Let's select our hubs for labels
ABIA_hubs <- ABIA_transformed %>%
filter(Dest == "DEN" |
Dest == "DAL" |
Dest == "ORD" |
Dest == "ATL" |
Dest == "CLT")
## Plot to our map
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(size=guide_legend(title="Arrival Delay"), color=guide_legend(title="Arrival Delay"))
ABIA_outbound <- ABIA %>%
filter(Origin == 'AUS')
## Let's join our tables
ABIA_locations <- inner_join(x = ABIA_outbound, y = airports, by = 'Dest')
## We need to reorganize the data and map it to the usmap package:
ABIA_locations <- ABIA_locations %>%
dplyr::select("Latitude", everything()) %>%       # Reorder LAT
dplyr::select("Longitude", everything()) %>%      # Reorder LONG
group_by(Longitude, Latitude, Dest) %>%           #Only 100+ flight destinations
summarize(count = n(),
mean_arr_delay = mean(ArrDelay, na.rm=TRUE)) %>%
filter(count > 499)
ABIA_transformed <- usmap_transform(ABIA_locations)
## Let's select our hubs for labels
ABIA_hubs <- ABIA_transformed %>%
filter(Dest == "DEN" |
Dest == "DAL" |
Dest == "ORD" |
Dest == "ATL" |
Dest == "CLT")
## Plot to our map
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(size=guide_legend(title="Arrival Delay"), color=guide_legend(title="Arrival Delay"))
```{r setup, include=FALSE, message=FALSE, warning=FALSE}
ABIA_outbound <- ABIA %>%
filter(Origin == 'AUS')
## Let's join our tables
ABIA_locations <- inner_join(x = ABIA_outbound, y = airports, by = 'Dest')
```{r setup, include=FALSE}
library(tidyverse)
library(mosaic)
library(airportr)
library(dplyr)
library(usmap)
library(maptools)
library(ggplot2)
library(rgdal)
library(viridis)
library(here)
library(colorspace)
ABIA <- read.csv(here("Data/ABIA.csv"))
## Let's take a look at what average delays look like for flights out of Austin
ABIA_stats = ABIA %>%
filter(Origin == 'AUS') %>%
group_by(Dest) %>%
summarize(count = n(),
mean_arr_delay = mean(ArrDelay, na.rm=TRUE)) %>%
filter(count > 499)
ggplot(ABIA_stats) +
geom_col(aes(x = mean_arr_delay, fct_reorder(Dest, mean_arr_delay), fill = mean_arr_delay), show.legend = FALSE) +
scale_fill_continuous_sequential(palette = "Heat"
)  +
theme_classic() +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)",
x = "Average Flight Delay",
y = "Destination") +
geom_vline(aes(xintercept=5.5546)) +
geom_text(mapping=aes(x=5.5546, y=5, label="Group Average"), size=4, angle=90, vjust=-.3, hjust=.3)
ggplot(ABIA_stats) +
geom_col(aes(x = mean_arr_delay, fct_reorder(Dest, mean_arr_delay), fill = mean_arr_delay), show.legend = FALSE) +
scale_fill_continuous_sequential(palette = "Heat"
)  +
theme_classic() +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)",
x = "Average Flight Delay",
y = "Destination") +
geom_vline(aes(xintercept=5.5546)) +
geom_text(mapping=aes(x=5.5546, y=5, label="Group Average"), size=4, angle=90, vjust=-.3, hjust=.3)
library(tidyverse)
library(mosaic)
library(airportr)
library(dplyr)
library(usmap)
library(maptools)
library(ggplot2)
library(rgdal)
library(viridis)
library(here)
library(colorspace)
ABIA <- read.csv(here("Data/ABIA.csv"))
## Let's take a look at what average delays look like for flights out of Austin
ABIA_stats = ABIA %>%
filter(Origin == 'AUS') %>%
group_by(Dest) %>%
summarize(count = n(),
mean_arr_delay = mean(ArrDelay, na.rm=TRUE)) %>%
filter(count > 499)
ggplot(ABIA_stats) +
geom_col(aes(x = mean_arr_delay, fct_reorder(Dest, mean_arr_delay), fill = mean_arr_delay), show.legend = FALSE) +
scale_fill_continuous_sequential(palette = "Heat"
)  +
theme_classic() +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)",
x = "Average Flight Delay",
y = "Destination") +
geom_vline(aes(xintercept=5.5546)) +
geom_text(mapping=aes(x=5.5546, y=5, label="Group Average"), size=4, angle=90, vjust=-.3, hjust=.3)
## Let's also have only Austin outgoing flights
ABIA_outbound <- ABIA %>%
filter(Origin == 'AUS')
## Let's join our tables
ABIA_locations <- inner_join(x = ABIA_outbound, y = airports, by = 'Dest')
## We need to reorganize the data and map it to the usmap package:
ABIA_locations <- ABIA_locations %>%
dplyr::select("Latitude", everything()) %>%       # Reorder LAT
dplyr::select("Longitude", everything()) %>%      # Reorder LONG
group_by(Longitude, Latitude, Dest) %>%           #Only 100+ flight destinations
summarize(count = n(),
mean_arr_delay = mean(ArrDelay, na.rm=TRUE)) %>%
filter(count > 499)
ABIA_transformed <- usmap_transform(ABIA_locations)
## Let's select our hubs for labels
ABIA_hubs <- ABIA_transformed %>%
filter(Dest == "DEN" |
Dest == "DAL" |
Dest == "ORD" |
Dest == "ATL" |
Dest == "CLT")
## Plot to our map
plot_usmap() +
geom_point(data = ABIA_transformed, aes(x = Longitude.1, y = Latitude.1, colour = mean_arr_delay, size = mean_arr_delay),
alpha = 0.8) +
scale_color_continuous_sequential(palette = "Heat", guide = "legend") +
scale_size_continuous(range = c(1, 25)) +
ggrepel::geom_label_repel(data = ABIA_hubs,
aes(x = Longitude.1, y = Latitude.1, label = Dest),
size = 3, alpha = 0.8,
label.r = unit(0.5, "lines"), label.size = 0.5,
segment.color = "red", segment.size = 1,
seed = 1002) +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)"
) +
theme(legend.position = "right") +
guides(size=guide_legend(title="Arrival Delay"), color=guide_legend(title="Arrival Delay"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(mosaic)
library(airportr)
library(dplyr)
library(usmap)
library(maptools)
library(ggplot2)
library(rgdal)
library(viridis)
library(here)
library(colorspace)
ABIA <- read.csv(here("Data/ABIA.csv"))
## Let's take a look at what average delays look like for flights out of Austin
ABIA_stats = ABIA %>%
filter(Origin == 'AUS') %>%
group_by(Dest) %>%
summarize(count = n(),
mean_arr_delay = mean(ArrDelay, na.rm=TRUE)) %>%
filter(count > 499)
ggplot(ABIA_stats) +
geom_col(aes(x = mean_arr_delay, fct_reorder(Dest, mean_arr_delay), fill = mean_arr_delay), show.legend = FALSE) +
scale_fill_continuous_sequential(palette = "Heat"
)  +
theme_classic() +
labs(title = "Worst Arrival Delays by Airport",
subtitle = "Arriving from Austin (At Least 500 Flights)",
x = "Average Flight Delay",
y = "Destination") +
geom_vline(aes(xintercept=5.5546)) +
geom_text(mapping=aes(x=5.5546, y=5, label="Group Average"), size=4, angle=90, vjust=-.3, hjust=.3)
congress109members = read.csv("../data/congress109members.csv", header=TRUE, row.names=1)
# read in data
congress109 = read.csv("../data/congress109.csv", header=TRUE, row.names=1)
congress109members = read.csv("../data/congress109members.csv", header=TRUE, row.names=1)
X_small = dplyr::select(congress109, minimum.wage, war.terror, tax.relief, hurrican.katrina)
X_small = dplyr::select(congress109, minimum.wage, war.terror, tax.relief, hurricane.katrina)
X_small[c)'John McCain', 'Mike Pence', 'John Kerry', 'Edward Kennedy']
X_small[c('John McCain', 'Mike Pence', 'John Kerry', 'Edward Kennedy')]
X_small[c('John McCain', 'Mike Pence', 'John Kerry', 'Edward Kennedy'),]
y = congress109members$party
#Sum prhase counts by party
D_rows = which(y == 'R')
D_rows = which(y == 'D')
#Sum prhase counts by party
R_rows = which(y == 'R')
colSums(X_small[R_rows,])
colSums(X_small[D_rows,])
probhat_R = colSums(X_small[R_rows,])
probhat_R =probhat_R/sum(probhat_R)
probhat_R %>% round(3)
library(tid)
library(tidyverse)
probhat_R %>% round(3)
# Sheila Jackson-Lee
X_small['Shila Jackson-Lee']
# Sheila Jackson-Lee
X_small['Shila Jackson-Lee',]
probhat_D = colSums(X_small[D_rows,])
probhat_D =probhat_D/sum(probhat_D)
probhat_D %>% round(3)
# Sheila Jackson-Lee
X_small['Shila Jackson-Lee',]
# Sheila Jackson-Lee
X_small['Sheila Jackson-Lee',]
x_try = X_small['Sheila Jackson-Lee',]
sum(x_try * log(probhat_R))
sum(x_try * log(probhat_D))
table(y) %>%  prop.table %>%  round(3)
library(ggplot2)
library(naivebayes)
library(modelr)
library(rsample)
library(foreach)
View(congress109)
# First split into a training and set set
# our naive bayes function expects X and Y separated out
X_NB = as.matrix(congress109)  # feature matrix
View(X_NB)
y_NB = factor(congress109members$party)
N = length(y_NB)
train_frac = 0.8
train_set = sample.int(N, floor(train_frac*N)) %>% sort
test_set = setdiff(1:N, train_set)
# training and testing matrices
X_train = X_NB[train_set,]
X_test = X_NB[test_set,]
View(X_test)
# Training and testing response vectors
y_train = y_NB[train_set]
y_test = y_NB[test_set]
# train the model: this function is in the naivebayes package.
# Check out "congress109_bayes_detailed" if you want to see a
# version where we step through these calculations "by hand", i.e.
# not relying on a package to build the classifier.
nb_model = multinomial_naive_bayes(x = X_train, y = y_train)
library(naivebayes)
install.packages("naivebayes")
library(naivebayes)
# train the model: this function is in the naivebayes package.
# Check out "congress109_bayes_detailed" if you want to see a
# version where we step through these calculations "by hand", i.e.
# not relying on a package to build the classifier.
nb_model = multinomial_naive_bayes(x = X_train, y = y_train)
# predict on the test set
y_test_pred = predict(nb_model, X_test)
# look at the confusion matrix
table(y_test, y_test_pred)
# overall test-set accuracy
sum(diag(table(y_test, y_test_pred)))/length(y_test)
# some examples of misses
misses = which(y_test != y_test_pred)
congress109members[test_set[misses],]
